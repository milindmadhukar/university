Algorithm GreedyKnapsack(N, C, weights[], profits[]) {
  // sort based on profit per weight
  for i = 0 to N {X[i] = 0}
  remC = C

  for i = 1 to N {
    if(W[i] > remC)
      break
    X[i] = 1
  }
  if (i <= N) {
    X[i] = remC / W[i]
  }
}

Algorithm Huffman(C, F(C), N) {
    Q <- C
    N = |C|
    for i = 1 to N - 1 {
        Z = allocate_node()
        X = Left[Z] = Extract_Min(Q)
        Y = Right[Z] = Extract_Min(Q)
        F(Z) = F[X] + F[Y]
        Insert_Node(Z)
    }
    return Extract_Min(Q)
}

Algorithm MaxSubarraySum(A, low, high) {
  if low == high 
    return low, high, arr[low]

  mid = (low + high) / 2

  left_low, left_high, left_sum = MaxSubarraySum(A, low, mid)
  right_low, right_high, right_sum = MaxSubarraySum(A, mid + 1, high)
  cross_low, cross_high, cross_sum = CrossingSubarraySum(A, low, mid, high)

  // if left_sum max return left details
  // if right_sum max return right details
  // else return cross details
}

Algorithm CrossingSubarraySum(A, low, mid, high) {
  left_sum = -inf
  sum = 0
  for(i = mid  down to low)
  {
    sum += a[i]
    if sum > left_sum
    {
      left_sum = sum
      left_most = i
    }
  }
  right_sum = -inf
  for(i = mid + 1 to high)
  {
    sum += a[i]
    if sum > right_sum
    {
      right_sum = sum
      right_most = i
    }
  }

  return left_most, right_most, left_sum + right_sum
}

Algorithm Karatsuba(num1, num2) {
  if (num1 <= 10 || num2 <= 10)
    return num1 * num2

  n = max(dig num1, dig num2)
  n2 = N / 2

  a = num1 % 10^n2
  b = num1 / 10^n2

  c = num2 % 10^n2
  d = num2 / 10^n2

  X = Karatsuba(a, c)
  Y = Karatsuba(b, d)
  Z = Karatsuba(a+b, c+d) - X - Y

  return X * 10^(2*n2) + Z * 10^n2 + Y
}

// Initialize all dp[N][N] to -1
Algorithm MatrixChainMultiplication(matrices, i, j) {
  if(i == j) 
    return 0

  if(dp[i][j] != -1) 
    return dp[i][j]

  dp[i][j] = INT_MAX
  for k = i to j - 1 {

    dp[i][j] = min(
      dp[i][j],
      MatrixChainMultiplication(matries, i, k) +
      MatrixChainMultiplication(matries, k+1, j) + matrices[i - 1] * matrices[k]+ matrices[j]
      )
  }

  return dp[i][j]
}

// C[m][n]
Algorithm LCS(X, Y, m, n) {
  for i = 1 to m {
    for j = 1 to n {
      if i == 1 or j == 1
        C[i][j] = 0
      else if X[i] == Y[j] 
        C[i][j] = 1 + C[i-1][j-1]
      else
        C[i][j] = max(C[i-1][j], C[i][j-1])
    }
  }

  return C[m][n]
}

Algorith LCS_Print(X, m, n, C) {
  if C[m][n] == C[m-1][n]
    LCS_Print(X, m-1, n, C)
  else if C[m][n] == C[m][n-1]
    LCS_Print(X, m, n-1, C)
  else
    LCS_Print(X, m-1, n-1, C)
    print(x[m])
}

 Algorithm KnapsackDP(W, weights, profits, n) {
   for i = 1 to N
   {
      for w = 1 to W {
        if (weights[i] > W)
          dp[i][w] = max(dp[i-1][w], dp[i-1][w - weights[i]] + profits[i])
      }
   }
   return dp[n][W]
 }

Algorithm NQueens(k, n) {
  for i = 1 to n
  {
    if place(i, k) {
      x[k] = i
      if k == n
        print(x[1:n])
      else
        NQueens(k+1, n)
    }
  }
}

Algorithm Place(i, k)
{
  for j = 1 to k - 1 {
    if x[j] == i OR abs(x[j] - i) == abs(j -k)
  }

  return True
}

Algorithm SumOfSubsets(s, k, r) {
  x[k] = 1
  if (s + w[k]  == m)
    print(x[1:k])
  else if (s + w[k] + w[k + 1] <= m)
    SumOfSubsets(s + w[k], k + 1, r - w[k])
  
  if (s + r - w[k] >= m) and (s + w[k+1] <= m) {
    x[k] = 0
    SumOfSubsets(s, k + 1, r - w[k])
  }
}

Masters Theorem

logb a 

logb A > k
O(n^logb A)

logb A = k
  if p > -1:
    O(n^k log^p+! n)
  if p = -1
    O(n^k log logn)
  if p < -1
    O(n^k)

if logb A < k
  if p >= 0:
    O(n^k log^p n)
  if p < 0:
    O(n^k)

